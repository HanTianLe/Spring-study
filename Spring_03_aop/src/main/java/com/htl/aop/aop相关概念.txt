Spring的AOP实现底层就是对上面的(jdk、cglib)动态代理的代码进行了封装，
封装后我们只需要对需要关注的部分进行代码编写，
并通过配置的方式完成指定目标的方法增强。

AOP常用的术语如下：
Target（目标对象）：代理的目标对象。
Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类。
Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点。
Pointcut（切入点）：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。
Advice（通知/增强）：所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。
Aspect（切面）：是切入点和通知（引介）的结合。
Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。
               spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。


切点表达式的写法：execution([修饰符] 返回值类型 包名.类名.方法名(参数))
        * 访问修饰符可以省略。
        * 返回值类型、包名、类名、方法名可以使用 星号* 代表任意。
        * 包名与类名之间一个 点. 代表当前包下的类，两个 点.. 表示当前包及其子包下的类。
        * 参数列表可以使用两个 点.. 表示任意个数、任意类型的参数列表。


通知/增强的类型：
 通知的写法：<aop:通知类型 method="切面类中方法名" pointcut="切点表达式"></aop:通知类型>
 1、前置通知：<aop:before>            用于配置前置通知。指定增强的方法在切入点方法之前执行。
 2、后置通知：<aop:after-returning>   用于配置后置通知。指定增强的方法在切入点方法之后执行。
 3、环绕通知：<aop:around>            用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行。
 4、异常抛出通知：<aop:throwing>       用于配置异常抛出通知。指定增强的方法在出现异常时执行。
 5、最终通知：<aop:after>             用于配置最终通知。无论增强方式执行是否有异常都会执行。


